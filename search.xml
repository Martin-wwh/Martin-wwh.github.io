<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JDK源码学习</title>
    <url>/2023/09/27/JDK%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>不积跬步无以至千里。兴趣和好的方法可以让学习之路充满欢乐。初步计划是每天晚上手工的时候看一个类的源码，不是单纯的背源码哦，我是把每个类源码的实现方式和自己的理解记录在我的每篇博文里，虽然很忙，不过时间就像那个，挤挤总是有的嘛~~晚上回来写写博文，一是加深理解二来也加深记忆方便以后查阅。希望看得到的各位童鞋支持我并且互相学习进步呀！期待接下来的山高路远 ~~</p>
<span id="more"></span>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>learn</tag>
      </tags>
  </entry>
  <entry>
    <title>trino初探</title>
    <url>/2023/10/17/Trino%E5%88%9D%E6%8E%A2/</url>
    <content><![CDATA[<p>Trino是一款被设计用于高效查询海量数据的分布式查询工具。</p>
<span id="more"></span>

<h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><h4 id="Trino不是什么"><a href="#Trino不是什么" class="headerlink" title="Trino不是什么"></a>Trino不是什么</h4><p>鉴于Trino被社区的很多人称作数据库，则定义Trino不是什么是有意义的。</p>
<p>Trino不是通用的关系型数据库。它不是MySQL，postgresql或者oracle的替代品。Trino并不是为处理在线事务处理(OLTP)而设计。</p>
<h4 id="Trino是什么"><a href="#Trino是什么" class="headerlink" title="Trino是什么"></a>Trino是什么</h4><p>Trino是一款被设计用于高效查询海量数据的分布式查询工具。如果处理TB或者PB级的数据，您可能会使用与Hadoop和HDFS交互的工具。Trino被设计为使用MapReduce作业管道（例如Hive或Pig）查询HDFS的工具的替代工具，但Trino不仅限于访问HDFS。Trino 可以并且已经扩展到对不同类型的数据源进行操作，包括传统关系数据库和 Cassandra 等其他数据源。</p>
<p>Trino被设计用于处理数据仓储和分析：数据分析，聚合海量数据并生成报告。这些功能通常被归类为在线分析处理（OLAP）。</p>
<h4 id="Trino-概念"><a href="#Trino-概念" class="headerlink" title="Trino 概念"></a>Trino 概念</h4><p>要了解Trino，必须先了解Trino中使用的术语和概念。</p>
<p>作为Trino管理员或Trino贡献者，应该了解Trino的阶段概念如何映射到任务以及任务如何包含一组处理数据的驱动程序。</p>
<h5 id="Architecture-（结构"><a href="#Architecture-（结构" class="headerlink" title="Architecture （结构)"></a>Architecture （结构)</h5><p>Trino是一个分布式查询引擎，可以跨多个服务器并发处理数据。有两种类型的Trino server，coordinators**(协调器)<strong>和workers</strong>(工作器)**。</p>
<h5 id="Cluster-集群"><a href="#Cluster-集群" class="headerlink" title="Cluster (集群)"></a>Cluster (集群)</h5><p>Trino集群由一个coordinator和多个worker组成。用户使用sql查询工具连接到coordinator 。coordinator和worker共同访问连接到的数据源。访问权限配置在catalog中。</p>
<p>处理中的每个查询是一个有状态操作。工作负载由coordinator编排，并行分布在集群的所有worker中。每个结点运行一个Trino的JVM实例，并使用现成进一步并发处理。</p>
<h5 id="Coordinator"><a href="#Coordinator" class="headerlink" title="Coordinator"></a>Coordinator</h5><p>Trino Coordinator是负责解析语句、规划查询和管理Trino worker节点的服务器。它是 Trino 安装的“大脑”，也是客户端连接以提交执行语句的节点。每个 Trino 安装都必须有一名 Trino Coordinator和一名或多名 Trino worker。出于开发或测试目的，可以将 Trino 的单个实例配置为执行这两个角色。</p>
<p>Coordinator跟踪每个worker的活动并协调查询的执行。Coordinator创建涉及一系列阶段的查询的逻辑模型，然后将其转换为在 Trino 工作集群上运行的一系列连接任务。</p>
<p>Coordinator使用 REST API 与worker和客户端进行通信。</p>
<h5 id="Worker"><a href="#Worker" class="headerlink" title="Worker"></a>Worker</h5><p>Trino worker是一个安装了Trino的服务器，负责执行任务和处理数据。worker节点从连接器获取数据并相互交换中间数据。</p>
<h4 id="Data-sources"><a href="#Data-sources" class="headerlink" title="Data sources"></a>Data sources</h4><p>通过本文档，您会了解诸如连接器(connector),目录(catalog)，模式(schema)和表(table)等术语。这些基本概念覆盖了特定数据源的trino模型。</p>
<h5 id="Connector"><a href="#Connector" class="headerlink" title="Connector"></a>Connector</h5><h5 id="Catalog"><a href="#Catalog" class="headerlink" title="Catalog"></a>Catalog</h5><p>Trino 目录包含模式并通过连接器引用数据源。</p>
<h5 id="Schema"><a href="#Schema" class="headerlink" title="Schema"></a>Schema</h5><h5 id="Table"><a href="#Table" class="headerlink" title="Table"></a>Table</h5><p>表是一组无序的行，它们被组织成具有类型的命名列。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>trino</tag>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>工具操作方法集锦</title>
    <url>/2023/10/27/%E5%B7%A5%E5%85%B7%E6%93%8D%E4%BD%9C%E6%96%B9%E6%B3%95%E9%9B%86%E9%94%A6/</url>
    <content><![CDATA[<p>本文用于记录常用或好用的工具类库以及相关方法。</p>
<span id="more"></span>

<h3 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h3><ol>
<li><p>所属类库：commons-lang3</p>
</li>
<li><p>工具类：org.apache.commons.lang3.StringUtils</p>
</li>
<li><p>版本：3.7</p>
<ul>
<li><p>移除字符串前后导的指定字符</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.lang.StringUtils;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringOperator</span> &#123;</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="type">String</span> <span class="variable">test</span> <span class="operator">=</span> <span class="string">&quot;,a,b,c,d,,&quot;</span>;</span><br><span class="line">       <span class="comment">// 去掉字符串test前后端的逗号</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">stripTest</span> <span class="operator">=</span> StringUtils.strip(test, <span class="string">&quot;,&quot;</span>);</span><br><span class="line">       <span class="comment">// stripTest的值为:&quot;a,b,c,d&quot;</span></span><br><span class="line">       </span><br><span class="line">       <span class="comment">// 去掉前后端的控制字符(即asc码表小于等于32的字符,比如空格符号在表中值为32)</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">test2</span> <span class="operator">=</span> <span class="string">&quot;a b c d   &quot;</span>;</span><br><span class="line">       <span class="type">String</span> <span class="variable">trimTest</span> <span class="operator">=</span> StringUtils.trim(test2);</span><br><span class="line">       <span class="comment">// trimTest的值为:&quot;a b c d&quot;</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
<li></li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>learning</tag>
      </tags>
  </entry>
  <entry>
    <title>志翔科技一面</title>
    <url>/2023/09/27/%E5%BF%97%E7%BF%94%E7%A7%91%E6%8A%80%E4%B8%80%E9%9D%A2/</url>
    <content><![CDATA[<p>面试。。。</p>
<span id="more"></span>



<h3 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h3><h3 id="项目经历-难点问题的解决方案。"><a href="#项目经历-难点问题的解决方案。" class="headerlink" title="项目经历+难点问题的解决方案。"></a>项目经历+难点问题的解决方案。</h3><h3 id="数据结构与算法："><a href="#数据结构与算法：" class="headerlink" title="数据结构与算法："></a>数据结构与算法：</h3><p>（1）描述栈  队列   堆的概念<br>         栈：线性结构，先入后出(FILO)<br>         队列：线性结构，先入先出(FIFO)<br>         堆：线性结构，完全二叉树<br>         (小根)堆的性质：根节点的值小于等于左右子节点的值<br>         队列的种类：单向队列  双向队列  循环队列  阻塞双向队列  非阻塞队列  优先队列  并发队列<br>         是否了解python中的deque？线性结构，可在两端进行插入删除操作。<br>         如何实现优先级队列？通过小根堆可实现优先级队列。<br>         是否了解堆排序，堆排序如何实现 ？堆排序的时间复杂度 ？<br>         将数组先初始化为大根堆，将堆顶元素与堆最后一个元素交换，同时堆的size-1，维持堆的性质，直到堆为空。时间复杂度为O(nlgn)</p>
<p>(2) 树 图<br>     如何通过非递归的方式实现深度优先遍历和广度优先遍历？通过栈实现</p>
<p>是否了解python中list的底层实现方式。</p>
<h3 id="网络与操作系统考察："><a href="#网络与操作系统考察：" class="headerlink" title="网络与操作系统考察："></a>网络与操作系统考察：</h3><p>（1）tcp与udp的区别<br>（2）描述tcp三次握手<br>（3）两次握手客户端已经简历tcp连接，为什么需要第三次握手？<br>（4）tcp连接对操作系统的负担（消耗文件句柄）<br>（5）进程之间通信的方式：socket通信  管道  共享内存<br>（6）命名管道与匿名管道的区别，linux管道符使用的是匿名管道or命名管道？<br>（7）共享内存是进程间通信最快的方式，那么共享内存的通信原理是什么？<br>（8）进程控制块中有哪些信息？<br>（9）进程的物理地址与逻辑地址分别指什么？</p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>learn</tag>
      </tags>
  </entry>
  <entry>
    <title>日常问题记录贴</title>
    <url>/2023/09/20/%E6%97%A5%E5%B8%B8%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95%E8%B4%B4/</url>
    <content><![CDATA[<p> 本文旨在及时记录项目实践中遇到的问题</p>
<span id="more"></span>



<h3 id="springboot项目在启动时出现问题"><a href="#springboot项目在启动时出现问题" class="headerlink" title="springboot项目在启动时出现问题"></a>springboot项目在启动时出现问题</h3><ol>
<li><p>问题报错 ：InetAddress.getLocalHost().getHostName() took 10011 milliseconds to respond. Please verify your network configuration。</p>
<p>根据报警信息可以看出，只要获取主机信息的耗时超过阈值HOST_NAME_RESOLVE_THRESHOLD&#x3D;200ms就会提示上述信息。很明显，遇到的实例里面，耗时已经达到10s了。</p>
</li>
<li><p>解决方法：</p>
<p>使用如下linux命令查看主机名：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hostname</span><br></pre></td></tr></table></figure>

<p>将主机名加入&#x2F;etc&#x2F;hosts文件中，如下所示：</p>
<p><img src="/../images/image-20230920144852458.png" alt="avatar"></p>
</li>
</ol>
<h3 id="springboot中不同的请求获取到了相同的threadlocal内的变量值"><a href="#springboot中不同的请求获取到了相同的threadlocal内的变量值" class="headerlink" title="springboot中不同的请求获取到了相同的threadlocal内的变量值"></a>springboot中不同的请求获取到了相同的threadlocal内的变量值</h3><ol>
<li><p>问题原因及表现</p>
<p>在项目中，对于用户信息的处理，是前端通过http header中将用户名传到后端接口中，后端项目通过拦截器（实现）将用户信息记录在请求所属线程的ThreadLocal变量中。每次前端请求都会将用户信息写入请求http header中，因此业务代码可以通过ThreadLocal变量获取用户信息。代码如下</p>
<p>拦截器部分代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;user-name&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isNotBlank(userName)) &#123;</span><br><span class="line">        	userName = URLDecoder.decode(userName, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        CurrentThreadInfoUtil.setUserInfo(userName);</span><br><span class="line">        <span class="keyword">return</span> HandlerInterceptor.<span class="built_in">super</span>.preHandle(request, response, handler);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>ThreadLocal操作的工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CurrentThreadInfoUtil</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> InheritableThreadLocal&lt;String&gt; userNameThreadLocal = <span class="keyword">new</span> <span class="title class_">InheritableThreadLocal</span>&lt;String&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 设置用户信息</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> userName 用户名</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setUserInfo</span><span class="params">(String userName)</span> &#123;</span><br><span class="line">		<span class="keyword">if</span>(StringUtils.isNoneBlank(userName))&#123;</span><br><span class="line">			userNameThreadLocal.set(userName);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getUserName</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> userNameThreadLocal.get();</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>业务端获取用户信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">	WorkflowCatalogRepository dao;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	WorkflowExtraRepository extraDao;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> WorkflowCatalogDO <span class="title function_">createCatalog</span><span class="params">(WorkflowCatalogDO workflowCatalog)</span> &#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="literal">null</span> == workflowCatalog) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullParamException</span>(<span class="string">&quot;分类实体&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(StringUtils.isBlank(workflowCatalog.getName())) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullParamException</span>(<span class="string">&quot;分类名称&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(StringUtils.isBlank(workflowCatalog.getId())) &#123;</span><br><span class="line">			workflowCatalog.setId(UUIDUtil.createUUID());</span><br><span class="line">		&#125;</span><br><span class="line">		workflowCatalog.setCreateBy(CurrentThreadInfoUtil.getUserName());</span><br><span class="line">		workflowCatalog.setCreateTime(Calendar.getInstance().getTime());</span><br><span class="line">		dao.saveAndFlush(workflowCatalog);</span><br><span class="line">		<span class="keyword">return</span> workflowCatalog;</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p>这段逻辑在项目中使用了一段时间都表现正常。直到有第三方应用接入后端项目中，调用了这个后端接口，由于第三方应用调用时并未在请求头中携带用户信息，但是入库的数据却发现user_name数据并不为空，且出现的用户名随机，而不是固定的，调用方对接口生成的数据产生了质疑。</p>
<ol start="2">
<li><p>解决方法</p>
<p>经过分析发现，springboot的undertow服务器是使用线程池来处理http请求的，我们在拦截器中为ThreadLocal变量写入了值，在请求使用完成后该变量仍旧保持着，当第三方应用调用产生的请求复用了已设置了变量的线程后，就自然的可以获取到已经设置过值的ThreadLocal变量。</p>
<p>既然了解了原因，就很自然产生了拦截器是否提供了请求结束之后做一些清理工作的钩子函数，而springboot的HandlerInterceptor接口正好提供了这样的一个钩子函数afterCompletion。</p>
<p>因此将拦截器改造如下，提取用户信息的功能即可完善。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;user-name&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isNotBlank(userName)) &#123;</span><br><span class="line">        	userName = URLDecoder.decode(userName, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        CurrentThreadInfoUtil.setUserInfo(userName);</span><br><span class="line">        <span class="keyword">return</span> HandlerInterceptor.<span class="built_in">super</span>.preHandle(request, response, handler);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, <span class="meta">@Nullable</span> Exception ex)</span>   <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        CurrentThreadInfoUtil.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> ** ThreadLocal工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CurrentThreadInfoUtil</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> InheritableThreadLocal&lt;String&gt; userNameThreadLocal = <span class="keyword">new</span> <span class="title class_">InheritableThreadLocal</span>&lt;String&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 设置用户信息</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> userName 用户名</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setUserInfo</span><span class="params">(String userName)</span> &#123;</span><br><span class="line">		<span class="keyword">if</span>(StringUtils.isNoneBlank(userName))&#123;</span><br><span class="line">			userNameThreadLocal.set(userName);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getUserName</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> userNameThreadLocal.get();</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line">		userNameThreadLocal.remove();</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>离线数据同步工具datax源码探索</title>
    <url>/2023/10/13/%E7%A6%BB%E7%BA%BF%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5%E5%B7%A5%E5%85%B7datax%E6%BA%90%E7%A0%81%E6%8E%A2%E7%B4%A2/</url>
    <content><![CDATA[<p>DataX是阿里云DataWorks数据集成的开源版本，提供了完整的DTL能力。</p>
<span id="more"></span>



<h3 id="datax通道配置项"><a href="#datax通道配置项" class="headerlink" title="datax通道配置项"></a>datax通道配置项</h3><p>对于datax通道channel的认识</p>
<p>datax与通道传输速率有关的参数：</p>
<p>job.setting.speed.channel : channel并发数<br>job.setting.speed.record : 全局配置channel的record限速<br>job.setting.speed.byte：全局配置channel的byte限速</p>
<p>core.transport.channel.speed.record：单channel的record限速<br>core.transport.channel.speed.byte：单channel的byte限速</p>
<p>job里是全局配置，core里是单个channel的配置。</p>
<p>上述配置项的优先级如下：</p>
<p>存在限制单次的记录数时：所需的channelNumberByRecord &#x3D; core.transport.channel.speed.record &#x2F; job.setting.speed.record</p>
<p>存在限制的字节数：所需的channelNumberByByte &#x3D; core.transport.channel.speed.byte &#x2F; job.setting.speed.byte</p>
<p>实际channel 数目取两者的最小值。</p>
<p>只有当没有配置通道限速的条件下，job.setting.speed.channel才会生效。</p>
<p>需要注意的点是当channel增大时，datax相应的会增加对内存的消耗（将同时缓存更多的数据），当内存使用率过高时，容易发生full gc</p>
<p>而导致datax效率降低。为防止这种情况，增大channel数目时，需同时增大datax启动jvm虚拟机时的内存大小。因此，channel并不是越大越好，</p>
<p>过分大反而影响宿主机性能。</p>
<p>*** 合适的channel和内存需要在实际场景中调试得出，而非越大越好。 ** </p>
<p>如何验证datax的并发数？</p>
<p>假设指定的并发度为5，可以通过日志验证</p>
<p><img src="/../images/image-20231016092049399.png"></p>
<p>可以看到最初始是5个子任务start，代表同时启动5个线程实现通道读写，</p>
<p><img src="/../images/image-20231016092322851.png"></p>
<p>当有一个子任务结束，另一个子任务立即启动执行。</p>
<h3 id="datax子任务的切分机制"><a href="#datax子任务的切分机制" class="headerlink" title="datax子任务的切分机制"></a>datax子任务的切分机制</h3><p>DataXJob启动后，会根据不同的源端切分策略，将Job切分成多个小的Task(子任务)，以便于并发执行。Task便是DataX作业的最小单元，每一个Task都会负责一部分数据的同步工作。</p>
<p>切分子任务的策略，是根据两个参数：splitPk以及channel数。</p>
<p><strong>注：powerjob中的每个datax任务都是单表操作。</strong></p>
<p>切分示例说明（示例来自曾小聪的测试任务t_xn_testing_5000w_汇聚_tohive_10）：</p>
<p>channel数目配置为10；splitPK设置为bm字段。（当channel&gt;1且指定splitPk时，将表切分出子任务）</p>
<p>默认切分因子为5：即 期望子任务数目 &#x3D; channel * 5</p>
<p>一个postgresql的表lq_xn.test_xn.t_xn_testing_5000w,单表默认切分因子为5.bm字段最小值为5，最大值为100000000</p>
<p>subTaskNum &#x3D; (100000000-5) % 50 &gt; 0  ? ( 50 + 1) : 50.</p>
<p>总共拆分出51个子任务。这51个子任务将投入到10个通道中并发执行，每个通道一次只会执行一个子任务，任务结束后再启动下一个任务的执行。</p>
<p><em><strong>设置切分因子： 在splitPk参数后面跟上参数  “splitFactor”: number。</strong></em></p>
<h3 id="结论：当前直接指定设置channel以提升并发度是有效的，但测试中，对于为达到最佳效果，需对具体任务进行测试调整。"><a href="#结论：当前直接指定设置channel以提升并发度是有效的，但测试中，对于为达到最佳效果，需对具体任务进行测试调整。" class="headerlink" title="结论：当前直接指定设置channel以提升并发度是有效的，但测试中，对于为达到最佳效果，需对具体任务进行测试调整。"></a>结论：当前直接指定设置channel以提升并发度是有效的，但测试中，对于为达到最佳效果，需对具体任务进行测试调整。</h3><ul>
<li>当提升DataX Job内Channel并发数时，调整JVM heap参数，原因如下：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 当一个Job内Channel数变多后，内存的占用会显著增加，因为DataX作为数据交换通道，在内存中会缓存较多的数据。</span><br><span class="line">- 例如Channel中会有一个Buffer，作为临时的数据交换的缓冲区，而在部分Reader和Writer的中，也会存在一些Buffer，为了防止jvm报内存溢出等错误，调大jvm的堆参数。</span><br><span class="line">- 通常可以将内存设置为4-8G。</span><br></pre></td></tr></table></figure>

<ul>
<li>Channel个数并不是越多越好， 原因如下：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- Channel个数的增加，带来的是更多的CPU消耗以及内存消耗。</span><br><span class="line">- 如果Channel并发配置过高导致JVM内存不够用，会出现的情况是发生频繁的Full GC，导出速度会骤降，适得其反。</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>深信服一面</title>
    <url>/2023/09/27/%E6%B7%B1%E4%BF%A1%E6%9C%8D%E4%B8%80%E9%9D%A2/</url>
    <content><![CDATA[<h3 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h3><p>  详细介绍项目经历。重点描述项目中遇到的难点问题，这些问题是如何解决的？</p>
<h3 id="数据结构基础"><a href="#数据结构基础" class="headerlink" title="数据结构基础"></a>数据结构基础</h3><p>（1）请简述数组与链表的区别链表是一种上一个元素的引用指向下一个元素的存储结构，链表通过指针来连接元素与元素；</p>
<p>链表是线性表的一种，所谓的线性表包含顺序线性表和链表，顺序线性表是用数组实现的，在内存中有顺序排列，通过改变数组大小实现。而链表不是用顺序实现的，用指针实现，在内存中不连续。意思就是说，链表就是将一系列不连续的内存联系起来，将那种碎片内存进行合理的利用，解决空间的问题。<br>所以，链表允许插入和删除表上任意位置上的节点，但是不允许随即存取。链表有很多种不同的类型：单向链表、双向链表及循环链表。<br>单向链表包含两个域，一个信息域，一个指针域。单向链表的节点有两部分组成，一部分保存节点本身的信息（信息域），另一部分保存下一个节点的地址（指针域），最后一个节点的指针域为空。<br>双向链表，每个节点的指针域包含两个指针 ，分别保存当前指针的前一个节点地址和后一个节点地址。<br>循环链表，末尾节点的指针域的指针指向首节点。<br>数组与链表的区别：<br>链表是链式存储结构，数组是顺序存储结构。<br>链表通过指针来连接元素与元素，数组则是把所有元素按次序依次存储。<br>链表的插入删除元素相对数组较为简单，不需要移动元素，且较为容易实现长度扩充，但是寻找某个元素较为困难；<br>数组寻找某个元素较为简单，但插入与删除比较复杂，由于最大长度需要在编程一开始时指定，故当达到最大长度时，扩充长度不如链表方便。<br>相同：两种结构均可实现数据的顺序存储，构造出来的模型呈线性结构。<br>（2）将两个有序链表合并为一个新的有序链表<br>解答：设两个有序链表为A和B，若A为空链表则返回B，若B为空链表，则返回A。<br>           新链表头节点为headC,初始为空，给定指针变量r始终指向新链表的末尾节点。<br>           第一步，找到A和B中较小的节点，将其值给headC，将已被取出的列表的指针下移到指向下一个节点，如此遍历完两个链表。</p>
<h3 id="实际算法题"><a href="#实际算法题" class="headerlink" title="实际算法题"></a>实际算法题</h3><p>给定长度为n的数组，找出其中出现次数大于等于n&#x2F;2的元素，并分析所用方法的时间复杂度。（假设改元素 一定存在）leetcode原题<br>如不考虑任何因素，单纯通过python实现，你会如何实现？（面试官解释通过列表的count方法）</p>
<p>给定一个列表，列表中的元素是二元组，该二元组的含义是ip段，形如（”223.98.208.0”, “223.98.223.255”）,ip段之间不相交。<br>问：给定ip，如何快速定位所属ip段？<br>答：将ip转换为数字，对列表按左端点排序之后，使用二分查找进行定位。<br>既然了解将ip转换为数字，是否了解网络字节序与主机字节序的区别。</p>
<h3 id="网络知识"><a href="#网络知识" class="headerlink" title="网络知识"></a>网络知识</h3><p>描述tcp三次握手的过程。<br>是否了解io多路复用？select与epoll()区别？</p>
<h3 id="python语言考察"><a href="#python语言考察" class="headerlink" title="python语言考察"></a>python语言考察</h3><p>如何定义一个类，使得该类支持with语法？<br>如何在python类中定义私有变量？<br>python中单下划线与双下划线的区别？<br>python中线程的缺陷是什么？<br>python支持协程，请简要描述协程以及应用。<br>是否了解pep8，请描述一下。</p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>learn</tag>
      </tags>
  </entry>
  <entry>
    <title>网易一面</title>
    <url>/2023/09/27/%E7%BD%91%E6%98%93%E4%B8%80%E9%9D%A2/</url>
    <content><![CDATA[<p>面试最开始是自我介绍环节，之后是问一下简历中的项目。接下来是基础知识：</p>
<h3 id="数据库："><a href="#数据库：" class="headerlink" title="数据库："></a>数据库：</h3><ol>
<li><p>用过哪些数据库？</p>
</li>
<li><p>是否了解mysql的数据库存储引擎？<br>答案：MySQL中有两种类型的存储引擎：事务性和非事务性。MyISAM、InnoDB、BDB、MEMORY、MERGE、EXAMPLE、NDB Cluster、ARCHIVE等</p>
</li>
<li><p>MyISAM与InnoDB有哪些区别？ </p>
<p>答案：见<a href="https://blog.csdn.net/qq_35642036/article/details/82820178">https://blog.csdn.net/qq_35642036/article/details/82820178</a> </p>
</li>
<li><p>在InnoDB存储引擎中，对行锁与表锁的理解？ </p>
<p>答案：见<a href="https://blog.csdn.net/luzhensmart/article/details/81675527">https://blog.csdn.net/luzhensmart/article/details/81675527</a></p>
</li>
<li><p>in与exists的区别</p>
<p>答案：<a href="https://blog.csdn.net/weixin_39539399/article/details/80851817">https://blog.csdn.net/weixin_39539399/article/details/80851817</a></p>
</li>
</ol>
<h3 id="python语言："><a href="#python语言：" class="headerlink" title="python语言："></a>python语言：</h3><p>讲一下python中的锁<br><a href="https://blog.csdn.net/shen1722585471/article/details/78507335">https://blog.csdn.net/shen1722585471/article/details/78507335</a></p>
<h3 id="linux操作系统："><a href="#linux操作系统：" class="headerlink" title="linux操作系统："></a>linux操作系统：</h3><ol>
<li>是否了解linux操作系统？</li>
<li>如何查看端口占用？netstat -anp |grep 端口号</li>
<li>过滤某个文件夹下最近一天修改的文件 <a href="https://blog.csdn.net/sun120204535/article/details/77523191">https://blog.csdn.net/sun120204535/article/details/77523191</a></li>
<li>ping命令的作用以及ping命令所使用的协议</li>
</ol>
<h3 id="算法题"><a href="#算法题" class="headerlink" title="算法题"></a>算法题</h3><p>给定二叉树，输入根节点和任意两个节点，输出这两个节点的最近公共祖先节点<br><a href="https://leetcode-cn.com/problems/er-cha-shu-de-zui-jin-gong-gong-zu-xian-lcof/">https://leetcode-cn.com/problems/er-cha-shu-de-zui-jin-gong-gong-zu-xian-lcof/</a></p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>learn</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次失败的面试——新华三云计算产品线Java开发工程师两面</title>
    <url>/2023/09/27/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B1%E8%B4%A5%E7%9A%84%E9%9D%A2%E8%AF%95%E2%80%94%E2%80%94%E6%96%B0%E5%8D%8E%E4%B8%89%E4%BA%91%E8%AE%A1%E7%AE%97%E4%BA%A7%E5%93%81%E7%BA%BFJava%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88%E4%B8%A4%E9%9D%A2/</url>
    <content><![CDATA[<p>上周六下班后跑到华三参加面试，面试之前先给笔试。笔试题分为两部分：选择题+编程题。</p>
<p>选择题比较简单这里不进行赘述。编程题分为三道题：一道数据库表，第一问新建一张单表（用户表），第二问，用户有组织，并且在组织中有职位，一个用户可以加入多个组织，一个组织可以有多个用户，据此设计数据库并写出sql语句（具体字段可以自行设计），第三问忘记了。。。</p>
<p>编程题第二道是有关于10W份文件（每份1M）文件的读写问题，具体问题不记得了。</p>
<p>第三道是N皇后问题的求解。</p>
<p>接下来是面试环节。面试共分为四轮：</p>
<p>第一轮，技术面。面试官问到如下问题：</p>
<p>1.抽象类和接口的区别？final能修饰参数吗？</p>
<p>2.JVM内存模型？</p>
<p>3.集合是否熟悉？有没有用过hashmap？</p>
<p>4.有无使用中间件？（如Redis，是否用过消息队列之类）</p>
<p>5.对多线程是否了解？是否用过线程池？说说线程池的用法</p>
<p>6.是否了解设计模式?能否详细说说熟悉的设计模型</p>
<p>7.泛型是否了解？</p>
<p>8.是否了解Java8中的Lamda表达式？</p>
<p>9.Spring的两大思想？IOC和AOP如何实现的？</p>
<p>10.二叉树的查找复杂度？编码实现二叉树的查找</p>
<p>11.是否用过线程锁（lock）？</p>
<p>12.SpringMVC和Spring上下文？</p>
<p>13.finalize（）方法调用时机？</p>
<p>14.JVM的垃圾回收机制有哪些？分别是如何实现的？</p>
<p>15.TCP&#x2F;IP四层网络结构？TCP和IP分别位于哪一层？TCP和UDP的区别？</p>
<p>16.TCP三次握手四次挥手？</p>
<p>问题可能有遗漏。一面到此结束，进入二面</p>
<p>1.现有一张数据库表，表中有数学、语文成绩，求两门成绩的和以及数学成绩的平均数</p>
<p>2.手写快速排序</p>
<p>3.mybatis如何使用数据库？</p>
<p>4.SpringMVC如何整合mybatis？</p>
<p>5.Spring中IOC的机制？</p>
<p>二面问题基本就这么多，更多聊得是对自己前公司的看法和自己职业前景的规划以及自己对职位的看法等。</p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>learn</tag>
      </tags>
  </entry>
  <entry>
    <title>通过arthas对jvm进行性能调优</title>
    <url>/2023/09/12/%E9%80%9A%E8%BF%87arthas%E5%AF%B9jvm%E8%BF%9B%E8%A1%8C%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/</url>
    <content><![CDATA[<p>前言：arthas是阿里巴巴开源的一款java虚拟机的线上诊断产品，可以极大提升线上排查问题的效率</p>
<span id="more"></span>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>jvm</tag>
      </tags>
  </entry>
</search>
